html{
    box-sizing: border-box;
    text-decoration: none;
}

*, *::before, *::after{
    box-sizing: inherit; 
    /* "inherit" tell the targeted elements to use the same value as the parent element. */
    /* "::before" selector creates a pseudo-element which is the first child of the selected element. */
    /* "::after" elector creates a pseudo-element which is the last child of the selected element. */
}

h1, p{
    text-align: center;
    margin-bottom: 10px;
}

a{
    color: black;
}

#piano{
    background-color: #00471b;
    width: 992px;
    height: 290px;
    margin: 80px auto;
    padding: 90px 20px 0 20px;
    position: relative;
    border-radius: 10px;
}
  
.keys{
    background-color: #040404;
    width: 949px;
    height: 180px;
    padding-left: 2px;
    overflow: hidden;
    /* This property aka "overflow: hidden" will hide any element that is pushed outside the set width value. */
}
  
.key{
    background-color: #ffffff;
    position: relative;
    width: 41px;
    height: 175px;
    margin: 2px;
    float: left;
    border-radius: 0 0 3px 3px;
}

.key.black--key::after{
    /*the selector will target the "key black--key" */
    background-color: #1d1e22;
    content: ""; /*  ensuring the element is rendered to the page while still being empty. */
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
}

.logo{
    width: 200px;
    position: absolute;
    top: 23px;
}

/* Media queries are commonly used to apply CSS based on the viewport width 
using the max-width and min-width properties. */
@media (max-width: 768px) {
    #piano{
        width: 358px;
    }
    .keys{
        width: 318px;
    }
    .logo{
        width: 150px;
    }
}

@media (min-width: 769px) and (max-width: 1199px){
    #piano{
        width: 675px;
    }
    
    .keys{
        width: 633px;
    }
}
